{"version":3,"sources":["carousel/api.js","carousel/NextArrow.js","carousel/PreviousArrow.js","carousel/Images.js","carousel/Carousel.js","App.js","serviceWorker.js","index.js"],"names":["getSlideInfo","a","axios","get","slideInfo","data","status","Error","NextArrow","nextArrowStyle","performSlideNext","onClick","debounce","style","className","PreviousArrow","previousArrowStyle","performSlidePrevious","Images","prevIndex","slideIndex","imagesToShow","coolBoxKeyframes","styled","div","img","keyframes","map","item","id","Carousel","images","useEffect","setSlideInfo","setCurrentSlides","useState","setSlideIndex","setPrevIndex","currentSlides","showPrevious","setShowPrevious","showNext","setShowNext","maintainBack","setMaintainBack","opacity","Math","abs","toMaintainNext","pop","length","mutatedCurrentSlides","toMaintainBack","shift","App","setImages","then","imageData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9504ef0.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'http://www.mocky.io/v2/5dc56c993200005e00769a65';\r\n\r\n\r\nconst getSlideInfo = async () => {\r\n  const url = BASE_URL;\r\n  const slideInfo = await axios.get(url);\r\n  const { data } = slideInfo;\r\n  if (slideInfo.status === 404 || slideInfo.status === 403 || slideInfo.status === 500) {\r\n    throw Error('processingError');\r\n  }\r\n  return data;\r\n};\r\n\r\n\r\n\r\n\r\nexport default getSlideInfo;","import React from 'react';\r\nimport {debounce} from 'lodash';\r\n\r\n\r\nconst NextArrow = ({nextArrowStyle, performSlideNext}) => (\r\n  <div onClick={debounce(performSlideNext,200)} \r\n    style={nextArrowStyle}>\r\n    <i className=\"fas fa-chevron-right fa-2x\" ></i>\r\n  </div>\r\n  )\r\n\r\n export default NextArrow;","import React from 'react';\r\nimport { debounce } from 'lodash';\r\n\r\n\r\nconst PreviousArrow = ({previousArrowStyle, performSlidePrevious}) => (\r\n  <div onClick={debounce(performSlidePrevious,200)} \r\n    style={previousArrowStyle}\r\n  >\r\n    <i className=\"fas fa-chevron-left fa-2x\"></i>\r\n  </div>\r\n  )\r\n\r\n export default PreviousArrow;","import React from 'react';\r\nimport styled, {keyframes} from 'styled-components';\r\nimport Rating from './Rating';\r\n\r\nconst Images = ({slideInfo, prevIndex, slideIndex, imagesToShow}) => {\r\n\r\n  const CarouselContainer = styled.div`\r\n  display:flex;\r\n  align-self:center;\r\n  height:400px;\r\n  overflow-X:hidden;\r\n  overflow-Y:hidden;\r\n  `\r\n  \r\n  const Image = styled.img`\r\n  height:200px;\r\n  width:100%;\r\n  box-shadow: rgba(0, 0, 0, 0.8) 3px 3px 10px inset;\r\n  border-left:5px solid transparent;\r\n  border-right:5px solid transparent;\r\n  `\r\n  \r\n  const coolBoxKeyframes = keyframes`\r\n  from {\r\n    transform:translateX(${prevIndex}%);\r\n  }\r\n  to {\r\n    transform:translateX(${slideIndex}%);\r\n  }\r\n  `\r\n  \r\n  const ImageContainer = styled.div`\r\n  max-width:${100/imagesToShow}%;\r\n  min-width:${100/imagesToShow}%;\r\n  height:400px;\r\n  animation-name: ${coolBoxKeyframes};\r\n  animation-duration: 700ms;\r\n  animation-timing-function: ease-in-out;\r\n  animation-iteration-count: 1;\r\n  animation-fill-mode: forwards;\r\n \r\n  `\r\n  const textStyle = {\r\n    color:'#1d1b1b', \r\n    // lineHeight:'14px',\r\n    wordWrap:'wrap',\r\n    borderLeft:'5px solid transparent',\r\n    borderRight:'5px solid transparent'\r\n  }\r\n\r\n  return(\r\n  <div className =\"CarouselContainer\">{slideInfo.map((item,id) =>(\r\n    // <ImageContainer className=\"ImageContainer\" key={id}>\r\n    //   <Image className=\"Image\" src={item.image} />\r\n    //   <div style={textStyle}>{item.category}</div>\r\n    //   <div style={textStyle}>{item.title}</div>\r\n    //   <div style={textStyle}>{`$${item.price} per person`}\r\n    //   </div>\r\n    //   <Rating starsToRender={item.reviews.rating} count={item.reviews.count}/>\r\n    // </ImageContainer>\r\n  <div>{id}</div>\r\n    )\r\n    )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Images;","import React, {useState, useEffect} from 'react';\r\nimport NextArrow from './NextArrow';\r\nimport PreviousArrow from './PreviousArrow';\r\nimport Images from './Images';\r\nimport './Carousel.css';\r\n\r\n\r\nfunction Carousel({images, imagesToShow}) {\r\n  \r\n  useEffect(() => {\r\n    setSlideInfo(images);\r\n    setCurrentSlides(images);\r\n  }, [images])\r\n\r\n  let [slideIndex, setSlideIndex] = useState(0); // animation purpose\r\n  let [prevIndex, setPrevIndex] = useState(0); // animation purpose\r\n  let [currentSlides, setCurrentSlides] = useState([]); // slides yet to come on right or left click\r\n  let [slideInfo, setSlideInfo] = useState([]); // to store initial array \r\n  let [showPrevious, setShowPrevious] = useState(false);// to show hide previous arrow\r\n  let [showNext, setShowNext] = useState(true);// to show hide next arrow\r\n  let [maintainBack, setMaintainBack] = useState([]);\r\n\r\n\r\n  const previousArrowStyle = {\r\n    opacity:showPrevious?1:0\r\n  }\r\n  const nextArrowStyle = {\r\n    opacity:showNext?1:0\r\n  }\r\n\r\n const performslideNext = () => {  // to move forward in slide\r\n  if(currentSlides.length <= imagesToShow){\r\n    return;\r\n  }\r\n  if(currentSlides.length <= (imagesToShow+1)){\r\n    setShowNext(false)\r\n  }\r\n  let mutatedCurrentSlides = [...currentSlides];\r\n  let toMaintainBack = mutatedCurrentSlides.shift();\r\n\r\n  setMaintainBack([...maintainBack, toMaintainBack])\r\n\r\n  setCurrentSlides(mutatedCurrentSlides); // to prevent next\r\n   setShowPrevious(true);\r\n    setPrevIndex(slideIndex)// to animate from last left point\r\n   setSlideIndex(slideIndex - 100)\r\n }\r\n\r\n const performslidePrevious = () => { /// to move back in slide\r\n  if((Math.abs(slideIndex)-100) === 0 ){\r\n    setShowPrevious(false)\r\n  }\r\n  if(slideIndex === 0 ){\r\n    return\r\n  }\r\n\r\n  let toMaintainNextArray = [...maintainBack];\r\n  let  toMaintainNext =  toMaintainNextArray.pop()\r\n  setCurrentSlides([...currentSlides, toMaintainNext]);\r\n  setShowNext(true);\r\n  setPrevIndex(slideIndex);// to animate from last ledt point\r\n  setSlideIndex(slideIndex + 100)\r\n }\r\n\r\n\r\n\r\n  return (\r\n  <div className=\"SliderWrapper\">\r\n    <div className=\"Slider\" >\r\n      <PreviousArrow performSlidePrevious={performslidePrevious} \r\n        previousArrowStyle={previousArrowStyle}\r\n     />\r\n        <Images slideInfo={slideInfo} \r\n          prevIndex={prevIndex} \r\n          slideIndex={slideIndex}\r\n          imagesToShow={imagesToShow}\r\n        />\r\n      <NextArrow performSlideNext={performslideNext} \r\n        nextArrowStyle={nextArrowStyle} \r\n      />\r\n    </div>\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Carousel;\r\n\r\n\r\n","import React, {useState, useEffect, lazy, Suspense}from 'react';\r\nimport getSlideInfo from './carousel/api';\r\nimport Carousel from './carousel/Carousel'\r\n\r\n// const Carousel = lazy(()=> import('./carousel/Carousel'))\r\n\r\nfunction App() {\r\n  \r\n  let [Images, setImages] = useState([]);\r\n\r\n  useEffect(() => {getSlideInfo().then(\r\n    (data) => {\r\n      let imageData = data.map(item => item)\r\n      setImages(imageData);\r\n    }\r\n  )}, [])\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <Suspense fallback={<div>Loading...</div>}> */}\r\n        <Carousel images={Images} // pass images and text content objects nested in array\r\n          imagesToShow={4} // enter how many images you want to show to the user in the slide\r\n        />\r\n      {/* </Suspense> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}